import express from 'express';
import multer from 'multer';
import fs from 'fs';
import archiver from 'archiver';

const router = express.Router();
export default router;

// Set up multer for file upload
const maxSize = 1.5 * 1000 * 1000 * 1000; // 1.5 GB
const upload = multer({
	dest: 'uploads/',
	limits: {
		fileSize: maxSize
	}
});

router.post('/', upload.array('files'), async (req, res) => {
	if (!req.files) {
		res.status(400).json({message: 'No files were uploaded'});
		return;
	}

	// req.files is array of `files` files
	// save the files to /files directory, under a new folder generated by generateRandomString
	// return the folder name as the id

	let files: Express.Multer.File[];

	if (Array.isArray(req.files)) {
		files = req.files;
	} else {
		files = Object.values(req.files).flat();
	}

	const uploadId = generateRandomString(5);
	// Create a new zip archive
	const archive = archiver('zip', {
		zlib: {level: 9} // Sets the compression level.
	});

	fs.mkdirSync(`uploads/${uploadId}`, {recursive: true});
	const output = fs.createWriteStream(`uploads/${uploadId}/${uploadId}.zip`);

	archive.pipe(output);

	// Add each file to the archive
	for (const file of files) {
		const oldPath = file.path;
		archive.file(oldPath, {name: file.originalname});
	}

	// Finalize the archive
	await archive.finalize();

	try {
		await new Promise((resolve, reject) => {
			output.on('close', resolve);
			output.on('error', reject);
		});
	} catch (error) {
		console.error(`Error zipping files`, error);
	}

	// Once you're done processing the files, send a response to the client
	res.json({id: uploadId});
});

function generateRandomString(length: number): string {
	let result = '';
	const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
	const charactersLength = characters.length;
	for (let i = 0; i < length; i++) {
		result += characters.charAt(Math.floor(Math.random() * charactersLength));
	}
	return result;
}